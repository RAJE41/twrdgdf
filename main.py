# –ò–ú–ü–û–†–¢
from highload import reg
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import keyboard
import sqlite3, asyncio, os

#–ë–û–¢
bot = Bot(token=os.environ.get('TOKEN'), parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())
admin = os.environ.get('ADMIN')
conn = sqlite3.connect('users.db'); cur = conn.cursor()
sskeys = sqlite3.connect('users.db'); sskey = conn.cursor()
codes = ["1"]
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

@dp.message_handler(state=["admin","Allow"], commands="start")
async def startAllow(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –ü–æ–ª—å–∑—É–π—Å—è –±–æ—Ç–æ–º —Å–ø–æ–∫–æ–π–Ω–æ ü•≥", reply_markup=keyboard.kb)


@dp.message_handler(state='code')
async def Allow(message: types.Message):
    if message.text in codes:
        cur.execute(f"""INSERT INTO users(userid) 
           VALUES({message.from_user.id});""")
        conn.commit()
        codes.remove(message.text)
        await message.reply("–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–ø–æ–∫–æ–π–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º ü•≥", reply_markup=keyboard.kb)
        state = dp.current_state(user=message.from_user.id)
        await state.set_state("Allow")
        return
    await message.reply("–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–æ–¥–∞üòñ")


@dp.message_handler(state='wait')
async def wait(message: types.Message):
    pass


@dp.message_handler(state=["admin","Allow"], text=["–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏ ‚ö°"])
async def get(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    await state.set_state("wait")
    await message.reply("–ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏, –ø–æ–¥–æ–∂–¥–∏üòâ")
    adr, passw, ss = await reg()
    with open("keys.txt", "a") as file:
        file.write(f"\n{ss}")
    await message.reply(f"""–ü—Ä–æ–∫—Å–∏ –ø–æ–ª—É—á–µ–Ω–æ‚úÖ

–ö–ª—é—á–∏–∫: <pre>{ss}</pre> üõ°

–õ–æ–≥–∏–Ω: <pre>{adr}</pre> üë§
–ü–∞—Ä–æ–ª—å: <pre>{passw}</pre> üîê 
–ü–∞–Ω–µ–ª—å: https://hi-l.eu/auth ‚öô
    """)

    await bot.send_message(admin, f"""<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∑—è–ª –∫–ª—é—á!</b>
    
ID: <b>{message.from_user.id}</b>
NAME: <b>{message.from_user.full_name}</b>
USERNAME: @{message.from_user.username}

–ö–ª—é—á: <pre>{ss}</pre>
""")

    if message.from_user.id != admin:
        await state.set_state("Allow")
        return
    await state.set_state("admin")


@dp.message_handler(state='admin', commands="addcode")
async def addcode(message: types.Message):
    argument = message.get_args()
    if argument != "":
        codes.append(argument)
        await message.reply(f"–ö–æ–¥ <pre>{argument}</pre> –¥–æ–±–∞–≤–ª–µ–Ω üîê")
        return

    await message.reply("–ù—É —Ç—ã –∫–æ–¥-—Ç–æ –≤–≤–µ–¥–∏")


@dp.message_handler(state='admin', commands="keys")
async def keys(message: types.Message):
    await message.answer_document(open("keys.txt", "rb"))

@dp.message_handler(state='*', commands="start")
async def start(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π, –ø–æ —ç—Ç–æ–º—É –≤–≤–µ–¥–∏ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å —É –∞–¥–º–∏–Ω–∞.")
    state = dp.current_state(user=message.from_user.id)
    await state.set_state("code")


# –ó–ê–ü–£–°–ö
async def main():
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    cur.execute("""CREATE TABLE IF NOT EXISTS users(
       userid INT PRIMARY KEY);
    """)
    conn.commit()

    cur.execute("SELECT * FROM users;")
    users = cur.fetchone()
    if users != None:
        for i in users:
            state = dp.current_state(user=i)
            await state.set_state("Allow")

    #state = dp.current_state(user=admin)
    #await state.set_state("admin")

if __name__ == "__main__":
    ioloop = asyncio.get_event_loop()
    ioloop.run_until_complete(main())
    executor.start_polling(dp, skip_updates=True)
