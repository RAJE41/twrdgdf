# –ò–ú–ü–û–†–¢
from highload import reg
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import keyboard
import sqlite3, asyncio, os

#–ë–û–¢
bot = Bot(token=os.environ.get('TOKEN'), parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())

admin = int(os.environ.get('ADMIN'))
allowed = [int(i) for i in os.environ.get('ids').split(",")]

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup


@dp.message_handler(state='wait')
async def wait(message: types.Message):
    pass


@dp.message_handler(state=["admin","Allow"], text=["–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏ ‚ö°"])
async def get(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    await state.set_state("wait")
    await message.reply("–ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∫—Å–∏, –ø–æ–¥–æ–∂–¥–∏üòâ")
    adr, passw, ss = await reg()
    with open("keys.txt", "a") as file:
        file.write(f"\n{ss}")
    await message.reply(f"""–ü—Ä–æ–∫—Å–∏ –ø–æ–ª—É—á–µ–Ω–æ‚úÖ

–ö–ª—é—á–∏–∫: <pre>{ss}</pre> üõ°

–õ–æ–≥–∏–Ω: <pre>{adr}</pre> üë§
–ü–∞—Ä–æ–ª—å: <pre>{passw}</pre> üîê 
–ü–∞–Ω–µ–ª—å: https://hi-l.eu/auth ‚öô
    """)

    await bot.send_message(admin, f"""<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∑—è–ª –∫–ª—é—á!</b>
    
ID: <b>{message.from_user.id}</b>
NAME: <b>{message.from_user.full_name}</b>
USERNAME: @{message.from_user.username}

–ö–ª—é—á: <pre>{ss}</pre>
""")

    if message.from_user.id != admin:
        await state.set_state("Allow")
        return
    await state.set_state("admin")


@dp.message_handler(state='admin', commands="keys")
async def keys(message: types.Message):
    await message.answer_document(open("keys.txt", "rb"))

@dp.message_handler(state=['Allow', 'admin'], commands="start")
async def start(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –ú–æ–∂–µ—à—å –±—Ä–∞—Ç—å –ø—Ä–æ–∫—Å–∏ –≤ —ç—Ç–æ–º –±–æ—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ üòé", reply_markup=keyboard.kb)


# –ó–ê–ü–£–°–ö
async def main():
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    if allowed != []:
        for i in allowed:
            state = dp.current_state(user=i)
            await state.set_state("Allow")

    state = dp.current_state(user=admin)
    await state.set_state("admin")

if __name__ == "__main__":
    ioloop = asyncio.get_event_loop()
    ioloop.run_until_complete(main())
    executor.start_polling(dp, skip_updates=True)
